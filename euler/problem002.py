'''
============================================================
http://projecteuler.net/problem=1

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

Created on Feb 19, 2013
@author: Oren Livne <livne@uchicago.edu>
============================================================
'''
def sum_even_fibonacci(F, f1=1L, f2=2L):
    '''Return sum of even-numbered Fibonacci numbers whose values <= F.

    >>> sum_even_fibonacci(4e6)
    4613732L'''
    # Initial condition
    term = lambda x: x if (x % 2 == 0) else 0
    s = term(f1)
    while f2 <= F:
        s += term(f2)
        # Advance to the next Fibonacci number
        f1, f2 = f2, f1 + f2
    return s 

def sum_even_fibonacci_no_parity_check(F):
    '''Return sum of even-numbered Fibonacci numbers whose values <= F. Does not check
    for parity. Works only for f1=1, f2=2, F >= 2.
    From http://projecteuler.net/project/resources/002_e3b16b7a862527d1e8f03f8ba204d6d0/002_overview.pdf

    >>> sum_even_fibonacci_no_parity_check(4e6)
    4613732L'''
    # Initial conditions on even Fibonacci numbers 
    f1, f2, s = 2L, 8L, 2L
    while f2 <= F:
        s += f2
        # Advance to the next even Fibonacci number
        f1, f2 = f2, 4 * f2 + f1
    return s 

def fibonacci(f1=1L, f2=1L):
    '''A generator of Fibonacci numbers.'''
    # Initial condition
    yield f1
    yield f2
    while True:
        f1, f2 = f2, f1 + f2
        yield f2

if __name__ == "__main__":
    import doctest
    doctest.testmod()
    
    # Tests regarding Problem 104
    import itertools as it
    from math import log
    for f in it.islice(fibonacci(), 100):
        a = 10 ** (max(0, int(log(f) / log(10)) - 0))
        print str(f).zfill(30), f / a
