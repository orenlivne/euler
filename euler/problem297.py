'''
============================================================
http://projecteuler.net/problem=297

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
Starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89.

Every positive integer can be uniquely written as a sum of nonconsecutive terms of the Fibonacci sequence. For example, 100 = 3 + 8 + 89.
Such a sum is called the Zeckendorf representation of the number.

For any integer n>0, let z(n) be the number of terms in the Zeckendorf representation of n.
Thus, z(5)=1, z(14)=2, z(100)=3 etc.
Also, for 0<n<106, SUM z(n) = 7894453.

Find SUM z(n) for 0<n<10**17.
============================================================
'''
from math import log
from itertools import islice
from problem002 import fibonacci

s5 = 5 ** 0.5
R_LOG_PHI = 1. / log((1 + s5) * 0.5)

largest_fib_ind_le = lambda F: int(log(s5 * F + 0.5) * R_LOG_PHI - 1)

class ZSummer(object):
    def __init__(self, MAX_N):
        self.F = list(islice(fibonacci(), largest_fib_ind_le(MAX_N) + 1))
        self._z = {}
        
    def largest_fib_lt(self, n):
        m = largest_fib_ind_le(n)
        Fm = self.F[m]
        if Fm == n: Fm = self.F[m - 1]
        return Fm
        
    def z_sum(self, n):
        _z = self._z
        if not _z.has_key(n): _z[n] = self._z_sum(n)
        return _z[n]

    def _z_sum(self, n):
        if n == 1: return 0
        Fm = self.largest_fib_lt(n)
        return self.z_sum(Fm) + self.z_sum(n - Fm) + n - Fm

if __name__ == "__main__":
    s = ZSummer(10 ** 17)
    print s.z_sum(10 ** 6)
    print s.z_sum(10 ** 17)
